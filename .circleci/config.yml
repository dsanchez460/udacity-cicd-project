version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
          # Your code here
            # destroy s3
            aws s3 rm "s3://${OldPipelineID}" --recursive
            # destroy front-end
            aws cloudformation delete-stack --stack-name frontend_<<parameters.workflow_id>>
            # destroy back-end
            aws cloudformation delete-stack --stack-name backend_<<parameters.workflow_id>>
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            curl -H "token: 568fab66-432b-4408-b72e-b57e1c19f236" \
            --request GET https://api.memstash.io/values/migration-results
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              # revert the migrations
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              cd backend
              npm run migrations:revert
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm run build
            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm run build
            exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: frontend-build
      # Your job code here
      name: frontend tests
      - run:
          command: |
            cd frontend
            npm install
            npm run build
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: backend-build
      # Your job code here
      name: backend tests
      - run:
          command: |
            cd backend
            npm install
            npm run build
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: frontend-build
      # Your job code here
      - run:
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: backend-build
      # Your job code here
      - run:
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Name=cicdproj-backend \
              --stack-name "be-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="be-${CIRCLE_WORKFLOW_ID}"
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Name=cicdproj-frontend \
              --stack-name "fe-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="fe-${CIRCLE_WORKFLOW_ID}"
              exit 1
      # setup to use persist_to_workspace
      - run: |
          yum -y install tar
      - run: |
          yum -y install gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:cicdproj-backend" \
            --output text >> .circleci/ansible/inventory.txt
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy_infrastructure:
          workflow_id: ${CIRCLE_WORKFLOW_ID

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["de:8e:d4:0d:e7:60:a1:eb:45:be:28:14:39:5e:8c:4f"]
      # attach workspace
      - attach_workspace:
            at: ~/project
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i /.circleci/ansible/inventory.txt /.circleci/ansible/configure-server.yml
            exit 1
      # Here's where you will add some code to rollback on failure
      - destroy_infrastructure:
          workflow_id: ${CIRCLE_WORKFLOW_ID

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            curl -H "Content-Type: text/plain" -H "token: 568fab66-432b-4408-b72e-b57e1c19f236" \
            --request PUT --data "0" https://api.memstash.io/values/migration-results
            exit 1
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            # your code here
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:cicdproj-backend" \
            --output text >> ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["de:8e:d4:0d:e7:60:a1:eb:45:be:28:14:39:5e:8c:4f"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
            pip3 install awscli
            apk add ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            ansible-playbook -i /.circleci/ansible/inventory.txt /.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  smoke-test:
    docker:
      # Lightweight Docker image 
        - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]