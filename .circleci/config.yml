version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # destroy s3
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            # destroy front-end
            aws cloudformation delete-stack --stack-name fe-<<parameters.workflow_id>>
            # destroy back-end
            aws cloudformation delete-stack --stack-name be-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            #  Add revert code here. You can find this in the Getting Started section.
            if curl -H "token: 568fab66-432b-4408-b72e-b57e1c19f236" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>> == "0";
            then
              # revert the migrations
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
#            cd ~/project/frontend
#            npm install --save
#            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
#            cd ~/project/backend
#            npm install --save
#            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm install
             npm run test
#            cd ~/project/frontend
#            npm install
#            # npm run build
#            npm test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
#            cd ~/project/backend
#            npm install
#            # npm run build
#            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm audit fix
            npm audit --audit-level=critical
#            cd ~/project/frontend
#            npm install
#            npm audit fix
#            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm audit fix --audit-level=critical --force
#            cd ~/project/backend
#            npm install
#            npm audit fix
#            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "be-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=ds-cicdproj-backend
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=ds-cicdproj-frontend \
              --stack-name "fe-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:project,Values=ds-cicdproj-backend" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/
#            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["de:8e:d4:0d:e7:60:a1:eb:45:be:28:14:39:5e:8c:4f"]
      - attach_workspace:
          at: ~/project
      - run: cat project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add tar
            apk add gzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt-get update && \
            sudo apt-get install \
                python3-pip \
            && pip3 install -U pip \
            && pip3 install awscli
            # pip install awscli
            cd backend
            npm install
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
      - run:
          name: Run migrations
          command: |
            cd backend
            echo ENVIRONMENT=production >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            ls project/backend
            cat project/backend/.env
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt
#            cd ~/project/backend
#            npm install
#            # npm run build
#            touch migrations.txt
#            npm run migrations >> migrations.txt
#            cat migrations.txt
#            migrationsuccess="0"
#            touch .env
#            echo ENVIRONMENT=production >> .env
#            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
#            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
#            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
#            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
#            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
#            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
#            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
#            mkdir ~/project/.circleci/ansible/roles/deploy/files
#            cp -r .env ~/project/backend/dist/
#            zip -r backend.zip ~/project/backend/dist/
#            cp -r backend.zip ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            migrationsuccess="0"
            if [grep -q "successfully" migrations.txt];
            then
              migrationsuccess="1"
            fi
            curl -H "Content-Type: text/plain" -H "token: 568fab66-432b-4408-b72e-b57e1c19f236" \
              --request PUT --data $migrationsuccess https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#      - persist_to_workspace:
#          root: ~/project/backend/
#          paths:
#            - migrations.txt
#      - persist_to_workspace:
#          root: ~/project/.circleci/ansible/
#          paths:
#            - roles/deploy/files
     # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#      - destroy-environment:
#          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=ds-cicdproj-backend" \
              --output text >> BACKEND_IP
            cat BACKEND_IP
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL: ${API_URL}"
            export API_URL=${API_URL}
            echo "${API_URL}" >> "frontend/.env"
            cd ~/project/frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["de:8e:d4:0d:e7:60:a1:eb:45:be:28:14:39:5e:8c:4f"]
      - attach_workspace:
          at: ~/project
#          at: ./.circleci/ansible
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add tar gzip
            apk add curl
            apk add gzip
            apk add nodejs
            apk add npm
            pip install awscli
      - run:
          name: Set env
          command: |
            echo ENVIROMENT=$ENVIROMENT > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Deploy backend
          command: |
            # ls ~/project/.circleci/ansible/roles/deploy/files/
            ls ~/project/.circleci/ansible
            # export ANSIBLE_HOST_KEY_CHECKING=False
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
            # ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
#      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip curl
            pip install awscli
#            echo ""
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BE_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=ds-cicdproj-backend" \
              --output text)
            echo ${BE_IP}
            # BACKEND_IP=$(curl -H "token: 568fab66-432b-4408-b72e-b57e1c19f236" --request GET https://api.memstash.io/values/BACKEND_IP)
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3.website.us-east-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Get backend url and backend smoke test.
          command: |
            # your code here
            BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
            echo "curl_target:http://${BACKEND_IP}:3030/api/status"
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Backend smoke test.
          command: |
            # BE_IP=$(aws ec2 describe-instances \
            #  --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #  --filters "Name=tag:project,Values=ds-cicdproj-backend" \
            #  --output text)
            #echo ${BE_IP}
            if curl --fail "https://${BE_IP}:3030/api/status"; then
              echo "Success"
            else
              echo "Fail"
              exit 1
            fi
#      - run:
#          name: Frontend smoke test.
#          command: |
#            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-us-west-2.amazonaws.com/index.html"
#            if curl -s ${URL} | grep "Welcome";
#            then
#              exit 0
#            else
#              exit 1
#            fi
      # Here's where you will add some code to rollback on failure
#      - destroy-environment:
#          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#      - revert-migrations:
#          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
               --stack-name "udapeople-cloudfront" \
               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" 
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
      - run:
          name: Remove old stacks and files
          command: |
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]];
            then
              aws s3 rm s3://udapeople-kk1j437dhjnmmz19339 --recursive
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-two]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
